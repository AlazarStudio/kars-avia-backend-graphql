generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Пользователи

enum Role {
  SUPERADMIN
  ADMIN
  HOTELADMIN
  AIRLINEADMIN
  MODERATOR
  HOTELMODERATOR
  AIRLINEMODERATOR
  USER
  HOTELUSER
  AIRLINEUSER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name            String
  email           String    @unique
  login           String    @unique
  password        String
  role            Role
  sender          Request[] @relation(name: "sender")
  receiver        Request[] @relation(name: "receiver")
  hotel           Hotel?    @relation(fields: [hotelId], references: [id])
  hotelId         String?   @db.ObjectId
  airline         Airline?  @relation(fields: [airlineId], references: [id])
  airlineId       String?   @db.ObjectId
  messageSender   Message[] @relation(name: "messageSender")
  messageReceiver Message[] @relation(name: "messageReceiver")
  Chat            Chat[]
}

// Пользователи

// Отели

model Hotel {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  country    String?
  city       String?
  address    String?
  index      String?
  quote      String?
  email      String?
  number     String?
  inn        String?
  ogrn       String?
  rs         String?
  bank       String?
  bik        String?
  images     String[]
  categories Category[]
  Request    Request[]
  tariffs    Tariff[]
  prices     Price[]
  rooms      Room[]
  User       User[]
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hotel    Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String  @db.ObjectId
  rooms    Room[]
  Tariff   Tariff? @relation(fields: [tariffId], references: [id])
  tariffId String? @db.ObjectId
  Price    Price[]
}

model Room {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  hotel      Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String    @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?   @db.ObjectId
  Tariff     Tariff?   @relation(fields: [tariffId], references: [id])
  tariffId   String?   @db.ObjectId
  places     Float?    @default(1)
}

model Tariff {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hotel    Hotel      @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String     @db.ObjectId
  room     Room[]
  price    Price[]
  Category Category[]
}

model Price {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  hotel      Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String   @db.ObjectId
  amount     Float?
  amountair  Float?
  tariff     Tariff?   @relation(fields: [tariffId], references: [id])
  tariffId   String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

// Отели

// Авиакомпании

model Airline {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  images  String[]
  country String?
  city    String?
  address String?
  index   String?
  quote   String?
  email   String?
  number  String?
  inn     String?
  ogrn    String?
  rs      String?
  bank    String?
  bik     String?

  staff   AirlinePersonal[]
  Request Request[]
  User    User[]
}

model AirlinePersonal {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  role         String
  login        String             @unique
  password     String
  Airline      Airline?           @relation(fields: [AirlineId], references: [id])
  AirlineId    String?            @db.ObjectId
  department   AirlineDepartment? @relation(fields: [departmentId], references: [id])
  departmentId String?            @db.ObjectId
}

model AirlineDepartment {
  id    String            @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  staff AirlinePersonal[]
}

// Авиакомпании

model Airport {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  code    String
  city    String
  Request Request[]
}

// Заявка

model Request {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  fullName     String
  position     String?
  gender       String?
  phoneNumber  String?
  airport      Airport   @relation(fields: [airportId], references: [id])
  airportId    String    @db.ObjectId
  arrival      Arrival
  departure    Departure
  // requestNumber String?
  roomCategory String
  roomNumber   String?
  mealPlan     MealPlan
  airline      Airline   @relation(fields: [airlineId], references: [id])
  airlineId    String    @db.ObjectId
  hotel        Hotel?    @relation(fields: [hotelId], references: [id])
  hotelId      String?   @db.ObjectId
  sender       User      @relation(name: "sender", fields: [senderId], references: [id])
  senderId     String    @db.ObjectId
  receiver     User?     @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId   String?   @db.ObjectId
  Chat         Chat[]
  status       String    @default("created")
}

type Arrival {
  flight String
  date   String
  time   String
}

type Departure {
  flight String
  date   String
  time   String
}

type MealPlan {
  included  Boolean
  breakfast Boolean?
  lunch     Boolean?
  dinner    Boolean?
}

// Заявка

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  sender     User     @relation(name: "messageSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User?    @relation(name: "messageReceiver", fields: [receiverId], references: [id])
  receiverId String?  @db.ObjectId
  chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?  @db.ObjectId
  createdAt  DateTime @default(now())
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  request   Request   @relation(fields: [requestId], references: [id])
  requestId String    @db.ObjectId
  Message   Message[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
}
