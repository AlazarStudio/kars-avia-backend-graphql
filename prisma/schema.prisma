generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  ---------------- ↓↓↓↓

// Airline
// AirlinePersonal
// Hotel
// HotelChess
// Log
// Message
// Report
// Request
// Reserve
// Passenger
// User

//  ---------------- ↑↑↑↑

// Пользователи  ---------------- ↓↓↓↓

enum Role {
  SUPERADMIN
  DISPATCHERADMIN
  HOTELADMIN
  AIRLINEADMIN
  DISPATCHERMODERATOR
  HOTELMODERATOR
  AIRLINEMODERATOR
  DISPATCHERUSER
  HOTELUSER
  AIRLINEUSER
  USER
}

enum Category {
  onePlace
  twoPlace
  threePlace
  fourPlace
}

enum TwoFAMethod {
  HOTP
  TOTP
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  name                String
  email               String             @unique
  number              String?
  login               String             @unique
  password            String
  images              String[]
  role                Role
  position            String?
  sender              Request[]          @relation(name: "sender")
  receiver            Request[]          @relation(name: "receiver")
  Reserve             Reserve[]
  airline             Airline?           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId           String?            @db.ObjectId
  AirlineDepartment   AirlineDepartment? @relation(fields: [airlineDepartmentId], references: [id], onDelete: Cascade)
  airlineDepartmentId String?            @db.ObjectId
  hotel               Hotel?             @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hotelId             String?            @db.ObjectId
  chats               ChatUser[]
  messageSender       Message[]          @relation(name: "messageSender")
  messageReceiver     Message[]          @relation(name: "messageReceiver")
  logs                Log[]
  dispatcher          Boolean?           @default(false)
  refreshToken        String?
  is2FAEnabled        Boolean            @default(false)
  twoFASecret         String?
  twoFAMethod         TwoFAMethod?
}

// Пользователи  ---------------- ↑↑↑↑

// Отели  ---------------- ↓↓↓↓

model Hotel {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  country            String?        @default("Россия")
  city               String?
  address            String?
  index              String?
  quote              Int?
  provision          Int?
  email              String?
  number             String?
  inn                String?
  ogrn               String?
  rs                 String?
  bank               String?
  bik                String?
  link               String?
  description        String?
  breakfast          MealTime?
  // breakfast    String?        @default("07:00 - 10:00")
  lunch              MealTime?
  // lunch        String?        @default("12:00 - 16:00")
  dinner             MealTime?
  // dinner       String?        @default("18:00 - 20:00")
  images             String[]
  MealPrice          MealPrice
  ReserveHotel       ReserveHotel[]
  hotelChesses       HotelChess[]
  Request            Request[]
  priceOneCategory   Float?         @default(0)
  priceTwoCategory   Float?         @default(0)
  priceThreeCategory Float?         @default(0)
  priceFourCategory  Float?         @default(0)
  rooms              Room[]
  User               User[]
  logs               Log[]
  stars              String?
  airportDistance    String?
  SavedReport        SavedReport[]
}

type MealTime {
  start String
  end   String
}

model HotelChess {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  hotel          Hotel            @relation(fields: [hotelId], references: [id])
  hotelId        String           @db.ObjectId
  reserveHotel   ReserveHotel?    @relation(fields: [reserveHotelId], references: [id])
  reserveHotelId String?          @db.ObjectId
  public         Boolean?
  room           String?
  roomN          Room?            @relation(fields: [roomId], references: [id])
  roomId         String?          @db.ObjectId
  place          Float?
  start          DateTime?
  end            DateTime?
  client         AirlinePersonal? @relation(fields: [clientId], references: [id])
  clientId       String?          @db.ObjectId
  request        Request?         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId      String?          @db.ObjectId
  reserve        Reserve?         @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId      String?          @db.ObjectId
  passenger      Passenger?       @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId    String?          @db.ObjectId
  status         String?
}

model Room {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  hotel       Hotel        @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId     String       @db.ObjectId
  description String?
  images      String[]
  category    Category
  places      Float?
  reserve     Boolean      @default(false)
  active      Boolean      @default(true)
  HotelChess  HotelChess[]
}

// Отели  ---------------- ↑↑↑↑

type MealPrice {
  breakfast Float?
  lunch     Float?
  dinner    Float?
}

// Авиакомпании  ---------------- ↓↓↓↓

model Airline {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  images             String[]
  country            String?
  city               String?
  address            String?
  index              String?
  quote              String?
  email              String?
  number             String?
  inn                String?
  ogrn               String?
  rs                 String?
  bank               String?
  bik                String?
  link               String?
  description        String?
  department         AirlineDepartment[]
  staff              AirlinePersonal[]
  Request            Request[]
  User               User[]
  logs               Log[]
  Reserve            Reserve[]
  MealPrice          MealPrice
  priceOneCategory   Float?              @default(0)
  priceTwoCategory   Float?              @default(0)
  priceThreeCategory Float?              @default(0)
  priceFourCategory  Float?              @default(0)
  SavedReport        SavedReport[]
}

model AirlineDepartment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  staff     AirlinePersonal[]
  users     User[]
  airline   Airline           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId String            @db.ObjectId
}

model AirlinePersonal {
  id           String                     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  number       String?
  position     String?
  gender       String?
  married      Boolean?                   @default(false)
  husband      AirlinePersonal?           @relation(name: "Marriage", fields: [husbandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  husbandId    String?                    @db.ObjectId
  marriedTo    AirlinePersonal[]          @relation(name: "Marriage")
  airline      Airline?                   @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId    String?                    @db.ObjectId
  department   AirlineDepartment?         @relation(fields: [departmentId], references: [id])
  departmentId String?                    @db.ObjectId
  Request      Request[]
  hotelChess   HotelChess[]
  Reserve      AirlinePersonalOnReserve[]
  ReserveHotel ReserveHotelPersonal[]
}

model AirlinePersonalOnReserve {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  airlinePersonal   AirlinePersonal @relation(fields: [airlinePersonalId], references: [id], onDelete: Cascade)
  airlinePersonalId String          @db.ObjectId
  reserve           Reserve         @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId         String          @db.ObjectId

  @@unique([airlinePersonalId, reserveId])
}

// Авиакомпании  ---------------- ↑↑↑↑

model Airport {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  code    String?
  city    String?
  Request Request[]
  Reserve Reserve[]
}

model City {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  city   String
  region String
}

// Заявка  ---------------- ↓↓↓↓

model Request {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  sender        User             @relation(name: "sender", fields: [senderId], references: [id])
  senderId      String           @db.ObjectId
  airport       Airport?         @relation(fields: [airportId], references: [id])
  airportId     String?          @db.ObjectId
  airline       Airline          @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId     String           @db.ObjectId
  person        AirlinePersonal? @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String?          @db.ObjectId
  arrival       DateTime
  departure     DateTime
  requestNumber String           @unique
  roomCategory  String?
  roomNumber    String?
  mealPlan      Json
  hotel         Hotel?           @relation(fields: [hotelId], references: [id])
  hotelId       String?          @db.ObjectId
  receiver      User?            @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId    String?          @db.ObjectId
  chat          Chat[]
  status        String           @default("created")
  hotelChess    HotelChess[]
  logs          Log[]
  archive       Boolean          @default(false)
}

model Reserve {
  id               String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime                   @default(now()) @map("created_at")
  updatedAt        DateTime                   @updatedAt @map("updated_at")
  sender           User                       @relation(fields: [senderId], references: [id])
  senderId         String                     @db.ObjectId
  airport          Airport?                   @relation(fields: [airportId], references: [id])
  airportId        String?                    @db.ObjectId
  airline          Airline                    @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId        String                     @db.ObjectId
  arrival          DateTime
  departure        DateTime
  reserveNumber    String                     @unique
  passengerCount   Int?
  mealPlan         Json
  status           String                     @default("created")
  person           AirlinePersonalOnReserve[]
  hotel            ReserveHotel[]
  passengers       Passenger[]
  chat             Chat[]
  logs             Log[]
  reserveForPerson Boolean
  archive          Boolean                    @default(false)
  hotelChess       HotelChess[]
}

model Passenger {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?       @default("no name")
  number         String?
  gender         String?
  child          Boolean       @default(false)
  animal         Boolean       @default(false)
  reserve        Reserve?      @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId      String?       @db.ObjectId
  temporary      Boolean       @default(true)
  ReserveHotel   ReserveHotel? @relation(fields: [reserveHotelId], references: [id])
  reserveHotelId String?       @db.ObjectId
  hotelChess     HotelChess[]
}

model ReserveHotel {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  reserve    Reserve                @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId  String                 @db.ObjectId
  hotel      Hotel                  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String                 @db.ObjectId
  hotelChess HotelChess[]
  capacity   Int?
  passengers Passenger[]
  person     ReserveHotelPersonal[]

  @@unique([reserveId, hotelId])
}

model ReserveHotelPersonal {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  reserveHotelId    String          @db.ObjectId
  airlinePersonalId String          @db.ObjectId
  reserveHotel      ReserveHotel    @relation(fields: [reserveHotelId], references: [id], onDelete: Cascade)
  airlinePersonal   AirlinePersonal @relation(fields: [airlinePersonalId], references: [id], onDelete: Cascade)

  @@unique([reserveHotelId, airlinePersonalId])
}

type MealPlan {
  included   Boolean
  breakfast  Int?
  lunch      Int?
  dinner     Int?
  dailyMeals DailyMeal?
}

type DailyMeal {
  date      DateTime
  breakfast Int
  lunch     Int
  dinner    Int
}

// Заявка  ---------------- ↑↑↑↑

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  sender     User     @relation(name: "messageSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User?    @relation(name: "messageReceiver", fields: [receiverId], references: [id])
  receiverId String?  @db.ObjectId
  chat       Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String?  @db.ObjectId
  createdAt  DateTime @default(now())
}

model ChatUser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([chatId, userId])
}

model Chat {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  request      Request?   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId    String?    @db.ObjectId
  messages     Message[]
  participants ChatUser[]
  createdAt    DateTime   @default(now())
  reserve      Reserve?   @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId    String?    @db.ObjectId
}

// Логи  ---------------- ↓↓↓↓

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  hotel       Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId     String?  @db.ObjectId
  airline     Airline? @relation(fields: [airlineId], references: [id])
  airlineId   String?  @db.ObjectId
  request     Request? @relation(fields: [requestId], references: [id])
  requestId   String?  @db.ObjectId
  reserve     Reserve? @relation(fields: [reserveId], references: [id])
  reserveId   String?  @db.ObjectId
  action      String
  reason      String?
  description String
  oldData     String?
  newData     String?
  createdAt   DateTime @default(now())
}

// Логи  ---------------- ↑↑↑↑

// Отчёты  ---------------- ↓↓↓↓

// model Report {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   user          User?    @relation(fields: [userId], references: [id])
//   userId        String?  @db.ObjectId
//   airline       Airline? @relation(fields: [airlineId], references: [id])
//   airlineId     String?  @db.ObjectId
//   startDate     DateTime
//   endDate       DateTime
//   reportType    String
//   reportData    String?
//   createdAt     DateTime @default(now())
// }

model SavedReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId   String?  @db.ObjectId
  airline   Airline? @relation(fields: [airlineId], references: [id])
  airlineId String?  @db.ObjectId
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
}

// Отчёты  ---------------- ↑↑↑↑
