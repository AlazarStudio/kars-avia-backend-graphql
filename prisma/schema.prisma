generator client {
  // provider = "prisma-client"
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  ---------------- ↓↓↓↓

// Airline
// AirlinePersonal
// Company
// Documentation
// Hotel
// HotelChess
// Log
// Message
// Report
// Request
// Reserve
// Passenger
// User

//  ---------------- ↑↑↑↑

// enum  ---------------- ↓↓↓↓

enum Role {
  SUPERADMIN
  DISPATCHERADMIN
  HOTELADMIN
  AIRLINEADMIN
  DISPATCHERMODERATOR
  HOTELMODERATOR
  AIRLINEMODERATOR
  DISPATCHERUSER
  HOTELUSER
  AIRLINEUSER
  USER
}

enum Category {
  apartment
  studio
  luxe
  onePlace
  twoPlace
  threePlace
  fourPlace
  fivePlace
  sixPlace
  sevenPlace
  eightPlace
  ninePlace
  tenPlace
  // elevenPlace
  // twelvePlace
  // thirteenPlace
  // fourteenPlace
  // fifteenPlace
  // sixteenPlace
  // seventeenPlace
  // eighteenPlace
  // nineteenPlace
  // twentyPlace
}

enum TwoFAMethod {
  HOTP
  TOTP
}

enum RoomType {
  room
  apartment
}

enum HotelType {
  hotel
  apartment
}

enum DocumentationType {
  documentation
  update
  patch
  etc
}

enum DocumentationFilter {
  airline
  hotel
  dispatcher
  etc
}

// enum  ---------------- ↑↑↑↑

// type  ---------------- ↓↓↓↓

type MealTime {
  start String
  end   String
}

type MealPrice {
  breakfast Float?
  lunch     Float?
  dinner    Float?
}

type MealPlan {
  included         Boolean     @default(false)
  breakfastEnabled Boolean     @default(false)
  breakfast        Int?
  lunchEnabled     Boolean     @default(false)
  lunch            Int?
  dinnerEnabled    Boolean     @default(false)
  dinner           Int?
  dailyMeals       DailyMeal[]
}

type DailyMeal {
  date      DateTime
  breakfast Int
  lunch     Int
  dinner    Int
}

type Price {
  priceApartment     Float? @default(0)
  priceStudio        Float? @default(0)
  priceLuxe          Float? @default(0)
  priceOneCategory   Float? @default(0)
  priceTwoCategory   Float? @default(0)
  priceThreeCategory Float? @default(0)
  priceFourCategory  Float? @default(0)
  priceFiveCategory  Float? @default(0)
  priceSixCategory   Float? @default(0)
  priceSevenCategory Float? @default(0)
  priceEightCategory Float? @default(0)
  priceNineCategory  Float? @default(0)
  priceTenCategory   Float? @default(0)
  // priceelevenCategory    Float? @default(0)
  // pricetwelveCategory    Float? @default(0)
  // pricethirteenCategory  Float? @default(0)
  // pricefourteenCategory  Float? @default(0)
  // pricefifteenCategory   Float? @default(0)
  // pricesixteenCategory   Float? @default(0)
  // priceseventeenCategory Float? @default(0)
  // priceeighteenCategory  Float? @default(0)
  // pricenineteenCategory  Float? @default(0)
  // pricetwentyCategory    Float? @default(0)
}

type Information {
  country     String?
  city        String?
  address     String?
  index       String?
  email       String?
  number      String?
  inn         String?
  ogrn        String?
  rs          String?
  bank        String?
  bik         String?
  link        String?
  description String?
  // airport String?
}

// type  ---------------- ↑↑↑↑

// Пользователи  ---------------- ↓↓↓↓

model User {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  lastSeen             DateTime?
  name                 String
  email                String             @unique
  number               String?
  login                String             @unique
  password             String
  images               String[]
  role                 Role
  // position             String?
  sender               Request[]          @relation(name: "sender")
  receiver             Request[]          @relation(name: "receiver")
  reserve              Reserve[]
  airline              Airline?           @relation(fields: [airlineId], references: [id], onDelete: NoAction)
  airlineId            String?            @db.ObjectId
  airlineDepartment    AirlineDepartment? @relation(fields: [airlineDepartmentId], references: [id], onDelete: NoAction)
  airlineDepartmentId  String?            @db.ObjectId
  hotel                Hotel?             @relation(fields: [hotelId], references: [id], onDelete: NoAction)
  hotelId              String?            @db.ObjectId
  chats                ChatUser[]
  messageSender        Message[]          @relation(name: "messageSender")
  messageReceiver      Message[]          @relation(name: "messageReceiver")
  logs                 Log[]
  dispatcher           Boolean?           @default(false)
  support              Boolean?           @default(false)
  refreshToken         String?
  fingerprint          String?
  is2FAEnabled         Boolean            @default(false)
  twoFASecret          String?
  twoFAMethod          TwoFAMethod?
  messageRead          MessageRead[]
  NotificationRead     NotificationRead[]
  resetPasswordToken   String? // для хранения токена восстановления
  resetPasswordExpires DateTime? // срок действия токена
  active               Boolean            @default(true)
  position             Position?          @relation(fields: [positionId], references: [id])
  positionId           String?            @db.ObjectId
  postedRequests       Request[]          @relation(name: "posted")
}

model PositionOnDepartment {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  airlineDepartment   AirlineDepartment @relation(fields: [airlineDepartmentId], references: [id], onDelete: Cascade)
  airlineDepartmentId String            @db.ObjectId
  position            Position          @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId          String            @db.ObjectId
  // hotelChess HotelChess[]
  // capacity   Int?
  // passengers Passenger[]

  @@unique([airlineDepartmentId, positionId])
}

model Position {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  separator         String?
  category          String?
  user              User[]
  airlinePersonal   AirlinePersonal[]
  airlineDepartment PositionOnDepartment[]
  // airline           Airline?               @relation(fields: [airlineId], references: [id], onDelete: NoAction)
  // airlineId         String?                @db.ObjectId
  // airlineDepartment   AirlineDepartment? @relation(fields: [airlineDepartmentId], references: [id])
  // airlineDepartmentId String?            @db.ObjectId
  // hotel             Hotel?                 @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // hotelId           String?                @db.ObjectId
}

// Пользователи  ---------------- ↑↑↑↑

// Отели  ---------------- ↓↓↓↓

model Hotel {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  nameFull           String?
  provision          Int?
  quote              Int?
  capacity           Int?
  information        Information?
  breakfast          MealTime?
  lunch              MealTime?
  dinner             MealTime?
  images             String[]
  mealPrice          MealPrice?
  mealPriceForAir    MealPrice?
  reserveHotel       ReserveHotel[]
  hotelChesses       HotelChess[]
  request            Request[]
  rooms              Room[]
  roomKind           RoomKind[]
  // Общая инеформация по номерам
  user               User[]
  logs               Log[]
  stars              String?
  usStars            String?
  airportDistance    String?
  discount           String?
  savedReport        SavedReport[]
  chat               Chat[]
  prices             Price?
  // position        Position[]
  Notification       Notification[]
  active             Boolean              @default(true)
  show               Boolean              @default(true)
  meal               Boolean              @default(true)
  access             Boolean              @default(false)
  type               HotelType            @default(hotel)
  gallery            String[]
  airport            Airport?             @relation(fields: [airportId], references: [id])
  airportId          String?              @db.ObjectId
  priceCategory      PriceCategory[]
  // tariff          Tariff[]
  AirlinePrice       AirlinePrice[]
  hotelContract      hotelContract[]
  additionalServices AdditionalServices[]
}

model HotelChess {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  hotel          Hotel            @relation(fields: [hotelId], references: [id])
  hotelId        String           @db.ObjectId
  reserveHotel   ReserveHotel?    @relation(fields: [reserveHotelId], references: [id])
  reserveHotelId String?          @db.ObjectId
  public         Boolean?
  room           Room?            @relation(fields: [roomId], references: [id])
  roomId         String?          @db.ObjectId
  place          Float?
  start          DateTime?
  end            DateTime?
  client         AirlinePersonal? @relation(fields: [clientId], references: [id])
  clientId       String?          @db.ObjectId
  request        Request?         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId      String?          @db.ObjectId
  reserve        Reserve?         @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId      String?          @db.ObjectId
  passenger      Passenger?       @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId    String?          @db.ObjectId
  status         String?
  mealPlan       MealPlan?
}

model Room {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  hotel             Hotel        @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId           String       @db.ObjectId
  description       String?
  descriptionSecond String?
  square            String?
  images            String[]
  category          Category
  places            Float?
  beds              Float?
  reserve           Boolean      @default(false)
  active            Boolean      @default(true)
  hotelChess        HotelChess[]
  type              RoomType     @default(room)
  price             Float?
  priceForAirline   Float?
  roomKind          RoomKind?    @relation(fields: [roomKindId], references: [id])
  roomKindId        String?      @db.ObjectId
}

model RoomKind {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  description     String?
  square          String?
  category        Category
  price           Float
  priceForAirline Float?
  priceForAirReq  Boolean  @default(false)
  images          String[]
  room            Room[]
  roomsCount      Int?
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  hotelId         String   @db.ObjectId
}

model AdditionalServices {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  description     String?
  price           Float
  priceForAirline Float?
  images          String[]
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  hotelId         String   @db.ObjectId
}

// model Tariff {
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   price    Float
//   category Category
//   hotel    Hotel    @relation(fields: [hotelId], references: [id])
//   hotelId  String   @db.ObjectId
//   room     Room[]
// }

// Отели  ---------------- ↑↑↑↑

// Авиакомпании  ---------------- ↓↓↓↓

model Airline {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  nameFull              String?
  images                String[]
  information           Information?
  department            AirlineDepartment[]
  staff                 AirlinePersonal[]
  request               Request[]
  user                  User[]
  logs                  Log[]
  reserve               Reserve[]
  // mealPrice             MealPrice?
  savedReport           SavedReport[]
  chat                  Chat[]
  // prices       Price?
  prices                AirlinePrice[]
  // position              Position[]
  Notification          Notification[]
  active                Boolean                 @default(true)
  airportOnAirlinePrice AirportOnAirlinePrice[]
  airlinePriceCategory  PriceCategory[]
  airlineContract       airlineContract[]
}

model PriceCategory {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  airline       Airline?       @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId     String?        @db.ObjectId
  hotel         Hotel?         @relation(fields: [hotelId], references: [id])
  hotelId       String?        @db.ObjectId
  company       Company?       @relation(fields: [companyId], references: [id])
  companyId     String?        @db.ObjectId
  name          String
  airlinePrices AirlinePrice[]
  // files                  String[]
}

model AirlinePrice {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  airline                Airline?                @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId              String?                 @db.ObjectId
  hotel                  Hotel?                  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId                String?                 @db.ObjectId
  airlinePriceCategory   PriceCategory?          @relation(fields: [airlinePriceCategoryId], references: [id])
  airlinePriceCategoryId String?                 @db.ObjectId
  airports               AirportOnAirlinePrice[]
  name                   String
  prices                 Price?
  mealPrice              MealPrice?
  // files                  String[]
}

model AirportOnAirlinePrice {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  airline        Airline       @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId      String        @db.ObjectId
  airport        Airport       @relation(fields: [airportId], references: [id], onDelete: Cascade)
  airportId      String        @db.ObjectId
  airlinePrice   AirlinePrice? @relation(fields: [airlinePriceId], references: [id])
  airlinePriceId String?       @db.ObjectId

  @@unique([airlineId, airportId])
}

model AirlineDepartment {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  staff     AirlinePersonal[]
  users     User[]
  airline   Airline                @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId String                 @db.ObjectId
  active    Boolean                @default(true)
  // accessMenu       AccessMenu?
  // notificationMenu NotificationMenu?
  position  PositionOnDepartment[]
}

// type AccessMenu {
//   requestMenu     Boolean @default(true)
//   requestCreate   Boolean @default(true)
//   requestUpdate   Boolean @default(true)
//   requestChat     Boolean @default(true)
//   personalMenu    Boolean @default(true)
//   personalCreate  Boolean @default(true)
//   personalUpdate  Boolean @default(true)
//   reserveMenu     Boolean @default(true)
//   reserveCreate   Boolean @default(true)
//   reserveUpdate   Boolean @default(true)
//   analyticsMenu   Boolean @default(true)
//   analyticsUpload Boolean @default(true)
//   reportMenu      Boolean @default(true)
//   reportCreate    Boolean @default(true)
//   userMenu        Boolean @default(true)
//   userCreate      Boolean @default(true)
//   userUpdate      Boolean @default(true)
//   airlineMenu     Boolean @default(true)
//   airlineUpdate   Boolean @default(true)
//   contracts       Boolean @default(true)
// }

// type NotificationMenu {
//   request Boolean @default(true)
// }

model AirlinePersonal {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  number       String?
  // position     String?
  gender       String?
  married      Boolean?           @default(false)
  husband      AirlinePersonal?   @relation(name: "Marriage", fields: [husbandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  husbandId    String?            @db.ObjectId
  marriedTo    AirlinePersonal[]  @relation(name: "Marriage")
  airline      Airline?           @relation(fields: [airlineId], references: [id], onDelete: NoAction)
  airlineId    String?            @db.ObjectId
  department   AirlineDepartment? @relation(fields: [departmentId], references: [id], onDelete: NoAction)
  departmentId String?            @db.ObjectId
  request      Request[]
  hotelChess   HotelChess[]
  active       Boolean            @default(true)
  position     Position?          @relation(fields: [positionId], references: [id])
  positionId   String?            @db.ObjectId
}

// Авиакомпании  ---------------- ↑↑↑↑

// Компании  ---------------- ↓↓↓↓

model Company {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  priceCategory   PriceCategory[]
  information     Information?
  airlineContract airlineContract[]
  hotelContract   hotelContract[]
}

model airlineContract {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  company              Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String?               @db.ObjectId
  airline              Airline?              @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId            String?               @db.ObjectId
  date                 DateTime?
  contractNumber       String?
  region               String?
  applicationType      String?
  notes                String?
  additionalAgreements additionalAgreement[]
  files                String[]
}

model additionalAgreement {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  airlineContract   airlineContract? @relation(fields: [airlineContractId], references: [id], onDelete: Cascade)
  airlineContractId String?          @db.ObjectId
  hotelContract     hotelContract?   @relation(fields: [hotelContractId], references: [id], onDelete: Cascade)
  hotelContractId   String?          @db.ObjectId
  date              DateTime?
  contractNumber    String?
  itemAgreement     String?
  notes             String?
  files             String[]
}

model hotelContract {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId           String?               @db.ObjectId
  hotel               Hotel?                @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId             String?               @db.ObjectId
  date                DateTime?
  contractNumber      String?
  region              City?                 @relation(fields: [cityId], references: [id])
  cityId              String?               @db.ObjectId
  notes               String?
  legalEntity         String?
  signatureMark       String?
  completionMark      String?
  normativeAct        String?
  applicationType     String?
  executor            String?
  files               String[]
  additionalAgreement additionalAgreement[]
}

// Компании  ---------------- ↑↑↑↑

model Airport {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  code                  String?
  city                  String?
  request               Request[]
  reserve               Reserve[]
  hotel                 Hotel[]
  airportOnAirlinePrice AirportOnAirlinePrice[]
}

model City {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  city          String
  region        String
  hotelContract hotelContract[]
}

// Заявка  ---------------- ↓↓↓↓

model Request {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  placementAt   DateTime?        @map("placement_at")
  sender        User             @relation(name: "sender", fields: [senderId], references: [id])
  senderId      String           @db.ObjectId
  airport       Airport?         @relation(fields: [airportId], references: [id])
  airportId     String?          @db.ObjectId
  airline       Airline          @relation(fields: [airlineId], references: [id], onDelete: NoAction)
  airlineId     String           @db.ObjectId
  person        AirlinePersonal? @relation(fields: [personId], references: [id], onDelete: NoAction)
  personId      String?          @db.ObjectId
  arrival       DateTime
  departure     DateTime
  requestNumber String           @unique
  roomCategory  String?
  roomNumber    String?
  mealPlan      MealPlan?
  hotel         Hotel?           @relation(fields: [hotelId], references: [id])
  hotelId       String?          @db.ObjectId
  receiver      User?            @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId    String?          @db.ObjectId
  posted        User?            @relation(name: "posted", fields: [postedId], references: [id])
  postedId      String?          @db.ObjectId
  chat          Chat[]
  status        String           @default("created")
  hotelChess    HotelChess[]
  logs          Log[]
  archive       Boolean          @default(false)
  files         String[]
  reserve       Boolean          @default(false)
  Notifications Notification[]
}

model Reserve {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  sender         User           @relation(fields: [senderId], references: [id])
  senderId       String         @db.ObjectId
  airport        Airport?       @relation(fields: [airportId], references: [id])
  airportId      String?        @db.ObjectId
  airline        Airline        @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId      String         @db.ObjectId
  arrival        DateTime
  departure      DateTime
  reserveNumber  String         @unique
  passengerCount Int?
  mealPlan       MealPlan?
  status         String         @default("created")
  hotel          ReserveHotel[]
  passengers     Passenger[]
  chat           Chat[]
  logs           Log[]
  archive        Boolean        @default(false)
  hotelChess     HotelChess[]
  files          String[]
  passengerList  String[]
  Notifications  Notification[]
}

model Passenger {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?       @default("no name")
  number         String?
  gender         String?
  child          Boolean       @default(false)
  animal         Boolean       @default(false)
  reserve        Reserve?      @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId      String?       @db.ObjectId
  temporary      Boolean       @default(true)
  reserveHotel   ReserveHotel? @relation(fields: [reserveHotelId], references: [id])
  reserveHotelId String?       @db.ObjectId
  hotelChess     HotelChess[]
}

model ReserveHotel {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  reserve    Reserve      @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId  String       @db.ObjectId
  hotel      Hotel        @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String       @db.ObjectId
  hotelChess HotelChess[]
  capacity   Int?
  passengers Passenger[]

  @@unique([reserveId, hotelId])
}

// Заявка  ---------------- ↑↑↑↑

// Чаты/сообщения  ---------------- ↓↓↓↓

model Chat {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  request      Request?       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId    String?        @db.ObjectId
  messages     Message[]
  participants ChatUser[]
  createdAt    DateTime       @default(now())
  reserve      Reserve?       @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId    String?        @db.ObjectId
  isSupport    Boolean        @default(false)
  separator    String?
  airline      Airline?       @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId    String?        @db.ObjectId
  hotel        Hotel?         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId      String?        @db.ObjectId
  Notification Notification[]
}

model Message {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  sender       User           @relation(name: "messageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String         @db.ObjectId
  receiver     User?          @relation(name: "messageReceiver", fields: [receiverId], references: [id], onDelete: NoAction)
  receiverId   String?        @db.ObjectId
  chat         Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId       String?        @db.ObjectId
  createdAt    DateTime       @default(now())
  isRead       Boolean        @default(false)
  readBy       MessageRead[]
  separator    String?
  Notification Notification[]
}

model MessageRead {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

model ChatUser {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  chat              Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @db.ObjectId
  lastReadMessageAt DateTime?

  @@unique([chatId, userId])
}

// Чаты/сообщения  ---------------- ↑↑↑↑

// Логи  ---------------- ↓↓↓↓

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  hotel       Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId     String?  @db.ObjectId
  airline     Airline? @relation(fields: [airlineId], references: [id])
  airlineId   String?  @db.ObjectId
  request     Request? @relation(fields: [requestId], references: [id])
  requestId   String?  @db.ObjectId
  reserve     Reserve? @relation(fields: [reserveId], references: [id])
  reserveId   String?  @db.ObjectId
  action      String
  reason      String?
  description String
  oldData     String?
  newData     String?
  createdAt   DateTime @default(now())
}

// Логи  ---------------- ↑↑↑↑

// Отчёты  ---------------- ↓↓↓↓

model SavedReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId   String?  @db.ObjectId
  airline   Airline? @relation(fields: [airlineId], references: [id])
  airlineId String?  @db.ObjectId
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  separator String?
}

// Отчёты  ---------------- ↑↑↑↑

model Notification {
  id          String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime                 @default(now())
  readBy      NotificationRead[]
  request     Request?                 @relation(fields: [requestId], references: [id])
  requestId   String?                  @db.ObjectId
  reserve     Reserve?                 @relation(fields: [reserveId], references: [id])
  reserveId   String?                  @db.ObjectId
  hotel       Hotel?                   @relation(fields: [hotelId], references: [id])
  hotelId     String?                  @db.ObjectId
  airline     Airline?                 @relation(fields: [airlineId], references: [id])
  airlineId   String?                  @db.ObjectId
  chat        Chat?                    @relation(fields: [chatId], references: [id])
  chatId      String?                  @db.ObjectId
  message     Message?                 @relation(fields: [messageId], references: [id])
  messageId   String?                  @db.ObjectId
  description NotificationDescription?
}

type NotificationDescription {
  action      String?
  reason      String?
  description String?
}

model NotificationRead {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  readAt         DateTime     @default(now())

  @@unique([notificationId, userId])
}

model PatchNote {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  name        String
  description String
  files       String[]
  images      String[]
}

// model Documentation {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   chapter     String
//   category    String
//   name        String
//   description String
//   files       String[]
// }

model Documentation {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  parentId    String?              @db.ObjectId
  parent      Documentation?       @relation("DocumentationHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Documentation[]      @relation("DocumentationHierarchy")
  order       Int?
  type        DocumentationType?
  filter      DocumentationFilter?
  name        String
  description String?
  clientKey   String?
  files       String[]
  images      String[]
}
