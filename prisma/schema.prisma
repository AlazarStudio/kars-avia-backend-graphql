generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Пользователи

enum Role {
  MEGADMIN
  SUPADMIN
  SUBADMIN
  MODERATOR
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  email    String    @unique
  login    String    @unique
  password String
  role     String
  sender   Request[] @relation(name: "sender")
  receiver Request[] @relation(name: "receiver")

  messageSender   Message[] @relation(name: "messageSender")
  messageReceiver Message[] @relation(name: "messageReceiver")
  Chat            Chat[]
}

// Пользователи

// Отели

model Hotel {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  country    String
  city       String
  address    String
  index      String
  quote      String
  email      String
  number     String
  inn        String
  ogrn       String
  rs         String
  bank       String
  bik        String
  staff      HotelPersonal[]
  categories HotelCategory[]
  rooms      HotelRoom[]
  tariffs    HotelTariff[]
  Request    Request[]
}

model HotelPersonal {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  role         String
  login        String           @unique
  password     String
  hotel        Hotel?           @relation(fields: [hotelId], references: [id])
  hotelId      String?          @db.ObjectId
  department   HotelDepartment? @relation(fields: [departmentId], references: [id])
  departmentId String?          @db.ObjectId
}

model HotelDepartment {
  id    String          @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  staff HotelPersonal[]
}

model HotelCategory {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  hotel     Hotel?        @relation(fields: [hotelId], references: [id])
  hotelId   String?       @db.ObjectId
  rooms     HotelRoom[]
  tariffs   HotelTariff[]
}

model HotelRoom {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  name            String
  hotelCategory   HotelCategory @relation(fields: [hotelCategoryId], references: [id])
  hotelCategoryId String        @db.ObjectId
  hotel           Hotel?        @relation(fields: [hotelId], references: [id])
  hotelId         String?       @db.ObjectId
}

model HotelTariff {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  name            String
  price           Float
  hotelCategory   HotelCategory @relation(fields: [hotelCategoryId], references: [id])
  hotelCategoryId String        @db.ObjectId
  hotel           Hotel?        @relation(fields: [hotelId], references: [id])
  hotelId         String?       @db.ObjectId

  // @@unique([hotelCategoryId])
}

// Отели

// Авиакомпании

model Airline {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  country String
  city    String
  address String
  index   String
  quote   String
  email   String
  number  String
  inn     String
  ogrn    String
  rs      String
  bank    String
  bik     String

  staff   AirlinePersonal[]
  Request Request[]
}

model AirlinePersonal {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  role         String
  login        String             @unique
  password     String
  Airline      Airline?           @relation(fields: [AirlineId], references: [id])
  AirlineId    String?            @db.ObjectId
  department   AirlineDepartment? @relation(fields: [departmentId], references: [id])
  departmentId String?            @db.ObjectId
}

model AirlineDepartment {
  id    String            @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  staff AirlinePersonal[]
}

// Авиакомпании

// Заявка

model Request {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  fullName      String
  position      String?
  gender        String?
  phoneNumber   String?
  airport       String
  arrival       Arrival
  departure     Departure
  requestNumber String?
  roomCategory  String
  roomNumber    String?
  mealPlan      MealPlan
  airline       Airline   @relation(fields: [airlineId], references: [id])
  airlineId     String    @db.ObjectId
  hotel         Hotel?    @relation(fields: [hotelId], references: [id])
  hotelId       String?   @db.ObjectId
  sender        User      @relation(name: "sender", fields: [senderId], references: [id])
  senderId      String    @db.ObjectId
  receiver      User      @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId    String    @db.ObjectId
  Chat          Chat[]
}

type Arrival {
  flight String
  date   String
  time   String
}

type Departure {
  flight String
  date   String
  time   String
}

type MealPlan {
  included  Boolean
  breakfast Boolean?
  lunch     Boolean?
  dinner    Boolean?
}

// Заявка

model Message {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  sender     User    @relation(name: "messageSender", fields: [senderId], references: [id])
  senderId   String  @db.ObjectId
  receiver   User?   @relation(name: "messageReceiver", fields: [receiverId], references: [id])
  receiverId String? @db.ObjectId
  chat       Chat?   @relation(fields: [chatId], references: [id])
  chatId     String? @db.ObjectId
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  request   Request   @relation(fields: [requestId], references: [id])
  requestId String    @db.ObjectId
  Message   Message[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
}
