generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  ---------------- ↓↓↓↓
//  ---------------- ↑↑↑↑

// Пользователи  ---------------- ↓↓↓↓

enum Role {
  SUPERADMIN
  DISPATCHERADMIN
  HOTELADMIN
  AIRLINEADMIN
  DISPATCHERMODERATOR
  HOTELMODERATOR
  AIRLINEMODERATOR
  DISPATCHERUSER
  HOTELUSER
  AIRLINEUSER
  USER
}

enum TwoFAMethod {
  HOTP
  TOTP
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name                String
  email               String             @unique
  number              String?
  login               String             @unique
  password            String
  role                Role
  sender              Request[]          @relation(name: "sender")
  receiver            Request[]          @relation(name: "receiver")
  hotel               Hotel?             @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId             String?            @db.ObjectId
  airline             Airline?           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId           String?            @db.ObjectId
  messageSender       Message[]          @relation(name: "messageSender")
  messageReceiver     Message[]          @relation(name: "messageReceiver")
  chats               ChatUser[]
  images              String[]
  AirlineDepartment   AirlineDepartment? @relation(fields: [airlineDepartmentId], references: [id], onDelete: Cascade)
  airlineDepartmentId String?            @db.ObjectId
  dispatcher          Boolean?           @default(false)
  // ----------------------------------------------------------------
  is2FAEnabled        Boolean            @default(false)
  twoFASecret         String?
  twoFAMethod         TwoFAMethod?
  Log                 Log[]
}

// Пользователи  ---------------- ↑↑↑↑

// Отели  ---------------- ↓↓↓↓

model Hotel {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  country      String?
  city         String?
  address      String?
  index        String?
  quote        String?
  email        String?
  number       String?
  inn          String?
  ogrn         String?
  rs           String?
  bank         String?
  bik          String?
  images       String[]
  hotelChesses HotelChess[]
  categories   Category[]
  Request      Request[]
  tariffs      Tariff[]
  prices       Price[]
  rooms        Room[]
  User         User[]
  Log          Log[]
}

model HotelChess {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String @db.ObjectId

  public    Boolean?
  room      String?
  place     Float?
  start     String?
  startTime String?
  end       String?
  endTime   String?
  client    AirlinePersonal? @relation(fields: [clientId], references: [id])
  clientId  String?          @db.ObjectId
  request   Request          @relation(fields: [requestId], references: [id])
  requestId String           @unique @db.ObjectId
}

model Tariff {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hotel    Hotel      @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String     @db.ObjectId
  room     Room[]
  price    Price[]
  Category Category[]
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hotel    Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String  @db.ObjectId
  rooms    Room[]
  Tariff   Tariff? @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId String? @db.ObjectId
  Price    Price[]
}

model Price {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  hotel      Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String    @db.ObjectId
  amount     Float?
  amountair  Float?
  tariff     Tariff?   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId   String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?   @db.ObjectId
}

model Room {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  hotel      Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String    @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?   @db.ObjectId
  Tariff     Tariff?   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId   String?   @db.ObjectId
  places     Float?
}

// Отели  ---------------- ↑↑↑↑

// Авиакомпании  ---------------- ↓↓↓↓

model Airline {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  images     String[]
  country    String?
  city       String?
  address    String?
  index      String?
  quote      String?
  email      String?
  number     String?
  inn        String?
  ogrn       String?
  rs         String?
  bank       String?
  bik        String?
  department AirlineDepartment[]
  staff      AirlinePersonal[]
  Request    Request[]
  User       User[]
  Log        Log[]
}

model AirlineDepartment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  staff     AirlinePersonal[]
  users     User[]
  airline   Airline           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId String            @db.ObjectId
}

model AirlinePersonal {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  number       String?
  position     String?
  gender       String?
  married      Boolean?           @default(false)
  husband      AirlinePersonal?   @relation(name: "Marriage", fields: [husbandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  husbandId    String?            @db.ObjectId
  marriedTo    AirlinePersonal[]  @relation(name: "Marriage")
  airline      Airline?           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId    String?            @db.ObjectId
  department   AirlineDepartment? @relation(fields: [departmentId], references: [id])
  departmentId String?            @db.ObjectId
  Request      Request[]
  hotelChess   HotelChess[]
}

// Авиакомпании  ---------------- ↑↑↑↑

model Airport {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  code    String?
  city    String?
  Request Request[]
}

model City {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  city   String
  region String
}

// Заявка  ---------------- ↓↓↓↓

model Request {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  person        AirlinePersonal @relation(fields: [personId], references: [id])
  personId      String          @db.ObjectId
  airport       Airport?        @relation(fields: [airportId], references: [id])
  airportId     String?         @db.ObjectId
  arrival       Arrival
  departure     Departure
  requestNumber String?
  roomCategory  String?
  roomNumber    String?
  mealPlan      MealPlan
  airline       Airline         @relation(fields: [airlineId], references: [id])
  airlineId     String          @db.ObjectId
  hotel         Hotel?          @relation(fields: [hotelId], references: [id])
  hotelId       String?         @db.ObjectId
  sender        User            @relation(name: "sender", fields: [senderId], references: [id])
  senderId      String          @db.ObjectId
  receiver      User?           @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId    String?         @db.ObjectId
  chat          Chat[]
  status        String          @default("created")
  hotelChess    HotelChess?
}

type Arrival {
  flight String
  date   String
  time   String
}

type Departure {
  flight String
  date   String
  time   String
}

type MealPlan {
  included  Boolean
  breakfast Boolean?
  lunch     Boolean?
  dinner    Boolean?
}

type Familly {
  passangers Passanger[]
}

type Passanger {
  name   String
  child  Boolean
  number String
}

// Заявка  ---------------- ↑↑↑↑

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  sender     User     @relation(name: "messageSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User?    @relation(name: "messageReceiver", fields: [receiverId], references: [id])
  receiverId String?  @db.ObjectId
  chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?  @db.ObjectId
  createdAt  DateTime @default(now())
}

model ChatUser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([chatId, userId])
}

model Chat {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  request      Request    @relation(fields: [requestId], references: [id])
  requestId    String     @db.ObjectId
  messages     Message[]
  participants ChatUser[]
  createdAt    DateTime   @default(now())
}

// Логи  ---------------- ↓↓↓↓

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  hotel       Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId     String?  @db.ObjectId
  airline     Airline? @relation(fields: [airlineId], references: [id])
  airlineId   String?  @db.ObjectId
  action      String 
  description String 
  createdAt   DateTime @default(now())
}

// Логи  ---------------- ↑↑↑↑
