generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  ---------------- ↓↓↓↓
//  ---------------- ↑↑↑↑

// Пользователи  ---------------- ↓↓↓↓

enum Role {
  SUPERADMIN
  DISPATCHERADMIN
  HOTELADMIN
  AIRLINEADMIN
  DISPATCHERMODERATOR
  HOTELMODERATOR
  AIRLINEMODERATOR
  DISPATCHERUSER
  HOTELUSER
  AIRLINEUSER
  USER
}

enum TwoFAMethod {
  HOTP
  TOTP
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name                String
  email               String             @unique
  number              String?
  login               String             @unique
  password            String
  role                Role
  sender              Request[]          @relation(name: "sender")
  receiver            Request[]          @relation(name: "receiver")
  hotel               Hotel?             @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId             String?
  airline             Airline?           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId           String?
  messageSender       Message[]          @relation(name: "messageSender")
  messageReceiver     Message[]          @relation(name: "messageReceiver")
  Chat                Chat[]
  images              String[]
  AirlineDepartment   AirlineDepartment? @relation(fields: [airlineDepartmentId], references: [id], onDelete: Cascade)
  airlineDepartmentId String?
  dispatcher          Boolean?           @default(false)
  // ----------------------------------------------------------------
  is2FAEnabled        Boolean            @default(false)
  twoFASecret         String?
  twoFAMethod         TwoFAMethod?
}

// Пользователи  ---------------- ↑↑↑↑

// Отели  ---------------- ↓↓↓↓

model Hotel {
  id         String     @id @default(uuid()) @map("_id")
  name       String
  country    String?
  city       String?
  address    String?
  index      String?
  quote      String?
  email      String?
  number     String?
  inn        String?
  ogrn       String?
  rs         String?
  bank       String?
  bik        String?
  images     String[]
  categories Category[]
  Request    Request[]
  tariffs    Tariff[]
  prices     Price[]
  rooms      Room[]
  User       User[]
}

model Tariff {
  id       String     @id @default(uuid()) @map("_id")
  name     String
  hotel    Hotel      @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String
  room     Room[]
  price    Price[]
  Category Category[]
}

model Category {
  id       String  @id @default(uuid()) @map("_id")
  name     String
  hotel    Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId  String
  rooms    Room[]
  Tariff   Tariff? @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId String?
  Price    Price[]
}

model Price {
  id         String    @id @default(uuid()) @map("_id")
  hotel      Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String
  amount     Float?
  amountair  Float?
  tariff     Tariff?   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId   String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?
}

model Room {
  id         String    @id @default(uuid()) @map("_id")
  name       String
  hotel      Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?
  Tariff     Tariff?   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  tariffId   String?
  places     Float?
}

// Отели  ---------------- ↑↑↑↑

// Авиакомпании  ---------------- ↓↓↓↓

model Airline {
  id         String              @id @default(uuid()) @map("_id")
  name       String
  images     String[]
  country    String?
  city       String?
  address    String?
  index      String?
  quote      String?
  email      String?
  number     String?
  inn        String?
  ogrn       String?
  rs         String?
  bank       String?
  bik        String?
  department AirlineDepartment[]
  staff      AirlinePersonal[]
  Request    Request[]
  User       User[]
}

model AirlineDepartment {
  id        String            @id @default(uuid()) @map("_id")
  name      String
  staff     AirlinePersonal[]
  users     User[]
  airline   Airline           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId String
}

model AirlinePersonal {
  id           String             @id @default(uuid()) @map("_id")
  name         String
  number       String?
  position     String?
  gender       String?
  airline      Airline?           @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId    String?
  department   AirlineDepartment? @relation(fields: [departmentId], references: [id])
  departmentId String?
}

// Авиакомпании  ---------------- ↑↑↑↑

model Airport {
  id      String    @id @default(uuid()) @map("_id")
  name    String
  code    String
  city    String
  Request Request[]
}

// Заявка  ---------------- ↓↓↓↓

model Request {
  id           String     @id @default(uuid()) @map("_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  fullName     String
  position     String?
  gender       String?
  phoneNumber  String?
  airport      Airport    @relation(fields: [airportId], references: [id])
  airportId    String
  arrival      Arrival?
  departure    Departure?
  // requestNumber String?
  roomCategory String
  roomNumber   String?
  mealPlan     MealPlan?
  airline      Airline    @relation(fields: [airlineId], references: [id])
  airlineId    String
  hotel        Hotel?     @relation(fields: [hotelId], references: [id])
  hotelId      String?
  sender       User       @relation(name: "sender", fields: [senderId], references: [id])
  senderId     String
  receiver     User?      @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId   String?
  Chat         Chat[]
  status       String     @default("created")
}

model Arrival {
  request   Request @relation(fields: [requestId], references: [id])
  requestId String  @unique
  flight    String
  date      String
  time      String
}

model Departure {
  request   Request @relation(fields: [requestId], references: [id])
  requestId String  @unique
  flight    String
  date      String
  time      String
}

model MealPlan {
  request   Request  @relation(fields: [requestId], references: [id])
  requestId String   @unique
  included  Boolean
  breakfast Boolean?
  lunch     Boolean?
  dinner    Boolean?
}

// Заявка  ---------------- ↑↑↑↑

model Message {
  id         String   @id @default(uuid()) @map("_id")
  text       String
  sender     User     @relation(name: "messageSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User?    @relation(name: "messageReceiver", fields: [receiverId], references: [id])
  receiverId String?
  chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?
  createdAt  DateTime @default(now())
}

model Chat {
  id        String    @id @default(uuid()) @map("_id")
  request   Request   @relation(fields: [requestId], references: [id])
  requestId String
  Message   Message[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
}

// Логи  ---------------- ↓↓↓↓

model Log {
  id          String   @id @default(uuid()) @map("_id")
  userId      String? // ID пользователя, если доступен
  action      String // Тип действия, например "login", "update_profile"
  description String // Описание действия
  createdAt   DateTime @default(now()) // Время действия
}

// Логи  ---------------- ↑↑↑↑
